* bashのhistoryコマンドの履歴を整理

:CATEGORIES: bash

```
短いオプション	意味
整数値	履歴の末尾から指定した行数分を表示する
-c	履歴一覧から全ての項目を削除する
-d 番号	指定した番号の履歴項目を削除する
-a	履歴ファイルに現在のセッションの履歴を追加する
-n	履歴ファイルからまだ読み込まれていない行を全て読み込む
-r ファイル	履歴ファイルを読み込み、内容を履歴一覧に追加する
-w ファイル	現在の履歴を履歴ファイルに上書きする
※オプション -a、-n、-r、-wは、履歴ファイルを指定しなかった場合、ホームディレクトリの「.bash_history」を用いる。環境変数HISTFILEが別のファイルを指定していた場合、そのファイルを用いる。

［source：］【 history 】コマンド――コマンド入力の履歴を表示、再利用する：Linux基本コマンドTips（154） - ＠IT https://www.atmarkit.co.jp/ait/articles/1710/20/news015.html
```

　上記のページを参考にさせてもらいましたが，とてもわかりやすくなっています。

　~/.bash_historyを直接編集しましたが，重複したコマンドの削除にVimの「sort u」コマンドを使いました。コマンドの実行順序とは履歴が違ってしまいますが，履歴の検索を使うことがほとんどなので，さほど問題はないという考えです。

* 《参考資料》Wordファイルの告発状をEmacsのorg-modeのorg形式に変換し再編集した作業過程

** pandocでWordのdocxファイルをMarkdownのmdファイルに変換

pandoc 2020-08-01_告発状.docx -o a.md

　変換自体は簡単なのですが，かなり修正が必要でした。最初org-modeに変換したのですが，見出しごとにプロパティ情報が挿入され，取り除くのもめんどうそうだったので，Markdownにやり直した次第です。

　Markdownの見出しは半角の＃で，Markdownは同じく＊になります。他にも入らない情報がかなり付加されていたので，VSCodeで開いて，置換での文字列変換や削除を行いました。

　「code a.md（ファイル名）」がコマンドラインからのVSCodeの起動になります。Microsoft社のテキストエディタということですが，Linuxでも普通に使えます。サイズの大きなファイルでも軽快に動き，高速に処理が出来るという話です。

** Emacsのorg-modeで，pandocで変換したWord文書の見出しの再編集

 　Wordでの見出しはレベル5まで使っていたのですが，pandocで変換されたものはレベル4までで，他にも不完全でした。

 ```
 コマンド	通常の入力	内容
 n	C-n	下のアウトラインへ
 p	C-p	上のアウトラインへ
 f	C-c C-f	下のアウトラインへ（同一レベル限定）
 b	C-c C-b	上のアウトラインへ（同一レベル限定）
 u	C-c C-u	上位レベルのアウトラインへ
 g	C-c C-w	org-refile の機能で別アウトラインにジャンプ（アウトラインは転送されない）
 j	C-c C-j	org-goto．バッファ内移動
 F	C-c M-f	次のコードブロックへ
 B	C-c M-b	前のコードブロックへ

 ［source：］org-mode のキーバインド、その先 - Qiita https://qiita.com/takaxp/items/a5a3383d7358c58240d0
 ```

 ```
 アウトラインの移動
 i で新しいアウトラインの追加と，org-refile を w で呼べるのが良いですね．

 コマンド	通常の入力	内容
 U	M-<up>	アウトラインを上に移動
 D	M-<down>	アウトラインを下に移動
 r	M-<right>	アウトラインのレベルを下げる
 l	M-<left>	アウトラインのレベルを上げる
 R	M-S-<right>	アウトラインのレベルをツリーごと下げる
 L	M-S-<left>	アウトラインのレベルをツリーごと上げる
 w	C-c C-w	org-refile．アウトラインの転送
 a		アウトラインをアーカイブ（確認を求める）
 i	M-<enter>	新しいアウトラインを追加
 ^	C-c ^	子のアウトラインをソーティング

 ［source：］org-mode のキーバインド、その先 - Qiita https://qiita.com/takaxp/items/a5a3383d7358c58240d0
 ```

 　「(setq org-use-speed-commands t)」でスピードコマンドが使えるようになる，とあります。これまでに何度かお世話になってきたページですが，余り使うことがなかったのですぐに忘れます。

 　今まで余りやったことがなかったのですが，「R	M-S-<right>	アウトラインのレベルをツリーごと下げる」というのは，すごくありがたいと思いました。

 　スピードコマンドを使うと，「un」で同一レベルの次の見出しに移動できます。そしてRで下位の見出しを含めたアウトラインレベル（見出し）の引き下げが出来ます。スピードコマンドは見出しの＊の先頭でないと正常に機能しないようです。これがマウスだと選択しづらくありました。

